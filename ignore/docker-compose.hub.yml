# TODO++ Docker Hub镜像部署配置
# 使用已发布到Docker Hub的镜像进行部署

version: '3.8'

services:
  # Nginx 反向代理服务 (使用Docker Hub镜像)
  nginx:
    image: ${DOCKER_USERNAME}/todo-plusplus-nginx:${IMAGE_TAG:-latest}
    container_name: todo-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"  # HTTPS端口 (可选)
    volumes:
      - ./frontend/build:/usr/share/nginx/html:ro
      - ./nginx/logs:/var/log/nginx
      # SSL证书挂载 (可选)
      # - ./nginx/ssl:/etc/nginx/ssl:ro
    depends_on:
      - backend
    networks:
      - todo-network
    environment:
      - TZ=Asia/Shanghai
    healthcheck:
      test: ["CMD", "wget", "--quiet", "--tries=1", "--spider", "http://localhost/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s

  # 后端 Node.js 服务 (使用Docker Hub镜像)
  backend:
    image: ${DOCKER_USERNAME}/todo-plusplus-backend:${IMAGE_TAG:-latest}
    container_name: todo-backend
    restart: unless-stopped
    expose:
      - "5000"  # 只暴露给内部网络
    volumes:
      - ./backend/logs:/app/logs
      - ./backend/uploads:/app/uploads
    environment:
      - NODE_ENV=production
      - PORT=5000
      - MONGODB_URI=${MONGODB_URI:-mongodb://mongo:27017/todoapp}
      - JWT_SECRET=${JWT_SECRET}
      - CORS_ORIGIN=${CORS_ORIGIN:-http://localhost}
      - LOG_LEVEL=${LOG_LEVEL:-info}
      - TZ=Asia/Shanghai
    depends_on:
      mongo:
        condition: service_healthy
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:5000/api/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 512M
          cpus: '0.5'
        reservations:
          memory: 256M
          cpus: '0.25'

  # MongoDB 数据库
  mongo:
    image: mongo:7.0
    container_name: todo-mongo
    restart: unless-stopped
    expose:
      - "27017"  # 只暴露给内部网络
    volumes:
      - mongo_data:/data/db
      - ./mongo/logs:/var/log/mongodb
      - ./mongo/init:/docker-entrypoint-initdb.d:ro
    environment:
      - MONGO_INITDB_ROOT_USERNAME=${MONGO_ROOT_USERNAME:-admin}
      - MONGO_INITDB_ROOT_PASSWORD=${MONGO_ROOT_PASSWORD}
      - MONGO_INITDB_DATABASE=todoapp
      - TZ=Asia/Shanghai
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "mongosh", "--eval", "db.adminCommand('ping')"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 1G
          cpus: '0.5'
        reservations:
          memory: 512M
          cpus: '0.25'

  # Redis 缓存 (可选)
  redis:
    image: redis:7.2-alpine
    container_name: todo-redis
    restart: unless-stopped
    expose:
      - "6379"
    volumes:
      - redis_data:/data
      - ./redis/redis.conf:/etc/redis/redis.conf:ro
    command: redis-server /etc/redis/redis.conf
    environment:
      - TZ=Asia/Shanghai
    networks:
      - todo-network
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    deploy:
      resources:
        limits:
          memory: 256M
          cpus: '0.25'

  # 监控服务 (可选)
  prometheus:
    image: prom/prometheus:latest
    container_name: todo-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    environment:
      - TZ=Asia/Shanghai
    networks:
      - todo-network

# 网络配置
networks:
  todo-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# 数据卷配置
volumes:
  mongo_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
